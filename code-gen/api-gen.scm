(import (prefix msgpack mp:))
(import chicken.process
        chicken.string
        chicken.sort)
(import msgpack-rpc-client)
(import srfi-69)

(define (explore-api)
  (let ((port (open-input-pipe "nvim --api-info")))
    (let* ((api-info (mp:unpack port))
           (version (hash-table-ref api-info "version"))
           ; (version.api_level (hash-table-ref api-info "version.api_level"))
           ; (version.api_compatible (hash-table-ref api-info "version.api_compatible"))
           (functions (hash-table-ref api-info "functions"))
           (ui_events (hash-table-ref api-info "ui_events"))
           (ui_options (hash-table-ref api-info "ui_options"))
           (types (hash-table-ref api-info "types"))
           (error-types (hash-table-ref api-info "error_types")))
      (display (untangle-msg version))
      (newline)
      (for-each (lambda (fn)
                  (let ((name (hash-table-ref fn "name"))
                        (keys (hash-table-keys fn)))
                    (display name)
                    (display ":")
                    (newline)
                    (display "   ")
                    (display (untangle-msg (hash-table-ref fn "parameters")))
                    (display " --> ")
                    (display (untangle-msg (hash-table-ref fn "return_type")))
                    (newline)))
                '()) ; (vector->list functions))
      (map (lambda (k)
             (write k)
             (newline)
             (write (untangle-msg (hash-table-ref error-types k)))
             (newline))
           (hash-table-keys error-types))
      (map (lambda (k)
             (write k)
             (newline)
             (write (untangle-msg (hash-table-ref types k)))
             (newline))
           (hash-table-keys types)))))

(define (gen-module)
  (let ((port (open-input-pipe "nvim --api-info")))
    (let* ((api-info (mp:unpack port))
           (version (hash-table-ref api-info "version"))
           ; (version.api_level (hash-table-ref api-info "version.api_level"))
           ; (version.api_compatible (hash-table-ref api-info "version.api_compatible"))
           (functions (hash-table-ref api-info "functions"))
           (ui_events (hash-table-ref api-info "ui_events"))
           (ui_options (hash-table-ref api-info "ui_options"))
           (types (hash-table-ref api-info "types"))
           (error-types (hash-table-ref api-info "error_types")))
      (let ((prefix->type-table '())
            (type->prefix-table '()))
        '()
        ))))

(explore-api)
